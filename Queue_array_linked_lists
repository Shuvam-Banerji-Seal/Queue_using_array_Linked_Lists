//most of the primary functions related to stacks

#include <stdio.h>
#include <stdlib.h>


#define SIZE 10
int S[SIZE];
int front = -1;
int rear = -1;

//function declaraction
void enqueue_array(int x);
void dequeue_array();
void enqueue_linked_list(int x);
void dequeue_linked_list();
void display_array();
void display_linked_list();
//global declaration
int ch;
//menu functions
void main_menu();
void sub_menu_array();
void sub_menu_linked_list();


//Linked list structure

struct Node
{
    int data;
    struct Node *next;
};
struct Node* top = NULL;
struct Node* temp;
int count = 0;





void main_menu()
{   printf("MAIN MENU");
    printf("\nWhat kind of DSA you want to use for Queue?");
        printf("\n\t1. Array");
        printf("\n\t2. Linked list");
        printf("\n\t3. exit");
        printf("\n Enter your choice:");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
            sub_menu_array();
            break;

            case 2:
            sub_menu_linked_list();
            break;

            case 3:
            exit(0);

            default:
                printf("\n Invalid Choice");

        }
}


void sub_menu_linked_list()
{
    int data;
    while(1)
    {
        printf("\n Sub-menu for Linked-list Implementation");
        printf("\n 1. Enqueue");
        printf("\n 2. Dequeue");
        printf("\n 3. Display");
        printf("\n 4. Return to the Main Menu");
        printf("\n 5. Exit");
        printf("\n Enter your Choice:");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
            printf("\n Enter the data:");
            scanf("%d", &data);
            enqueue_linked_list(data);
            break;

            case 2:
            dequeue_linked_list();

            case 3:
            display_linked_list();
            break;

            case 4:
            main_menu();
            break;

            case 5:
            exit(0);

            default:
                printf("\n Invalid Choice");

        }
    }
}


void sub_menu_array()
{
    int data;
    while(1)
    {
        printf("\n Sub-menu for Array Implementation");
        printf("\n 1. Enqueue");
        printf("\n 2. Dequeue");
        printf("\n 3. Display");
        printf("\n 4. Return to the Main Menu");
        printf("\n 5. Exit");
        printf("\n Enter your Choice:");
        scanf("%d", &ch);
        switch (ch)
        {
            case 1:
            printf("\n Enter the data:");
            scanf("%d", &data);
            enqueue_array(data);
            break;

            case 2:
            dequeue_array();

            case 3:
            display_array();
            break;

            case 4:
            main_menu();
            break;

            case 5:
            exit(0);

            default:
                printf("\n Invalid Choice");

        }
    }
}

int main()
{
    main_menu();
}





void dequeue_array()
{
    if (front == -1)
    {
        printf("\n Queue Underflow");
    }

    else
    {
        printf("\n Item to be removed is %d.", S[front]);
        front++;
    }
}

void enqueue_array(int x)
{
    if ((front == 0 && rear == SIZE - 1) || (front == rear + 1))
    {
        printf("\n Queue Overflow");
    }
    else if (front == -1)
    {
        front = rear = 0;
        S[rear] = x;
    }
    else if (rear == SIZE - 1 && front != 0)
    {
        rear = 0;
        S[rear] = x;
    }
    else
    {
        rear++;
        S[rear] = x;
    }
    
}


void display_array()
{
    int i;
    if (front == -1)
    {
    printf("\n Queue is empty!");
    }
    else
    {
        printf("\n The Queue is:");
        for (i = front; i <= rear; i++)
        {
            printf("%d \t", S[i]);
        }
    }
}


void enqueue_linked_list(int x)
{
    temp = (struct Node *)malloc(sizeof(struct Node));
    struct Node *ptr = (struct Node *)malloc(sizeof(struct Node));
    temp->data = x;
    temp->next = NULL;
    if (top == NULL)
    {
        top = temp;
    }
    else
    {   ptr = top;
        //insertion at the end
        while (ptr->next != NULL)
        {
            ptr = ptr->next;

        }
        ptr->next = temp;

    }
}

void dequeue_linked_list()
{
    if (top == NULL)
    {
        printf("\n Queue Underflow");
    }
    else
    {
        printf("\n Item to be removed is %d.", top->data);
        top = top->next;//deleting a node from the beginning
    }

}

void display_linked_list()
{
    temp = top;
    if (top == NULL)
    {
        printf("\n Queue is empty!");
    }
    else
    {
        printf("\n The Queue is:");
        while (temp != NULL)
        {
            printf("%d \t", temp->data);
            temp = temp->next;
        }
    }
}
